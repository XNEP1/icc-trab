Trabalho 1 de ICC

Esse trabalho foi feito apenas por Bruno Krügel (GRR: 20206874). 

No programa é usado uma estrutura de dados chamada  SisDiag (Sistema Linear Diagonal) que guarda cada diagonal de um sistema linear k-diagonal de tamanho n em cada *coluna* de uma matriz n x k.

Exemplo:
Esse sistema de n=13 e k=5


     6.31933   0.12129   0.40335         0         0         0         0         0         0         0         0         0         0   |   10.1272
    0.822375  0.149912  0.403666 0.0934103         0         0         0         0         0         0         0         0         0   |   1.62489
    0.665764  0.484595   7.70683  0.363702  0.389191         0         0         0         0         0         0         0         0   |   6.09148
           0  0.240368  0.919199   2.42188   0.32831  0.552836         0         0         0         0         0         0         0   |   3.91664
           0         0  0.213782  0.988277   4.10009  0.530454  0.445994         0         0         0         0         0         0   |   17.1278
           0         0         0  0.792734 0.0574868    5.9119  0.904824  0.786781         0         0         0         0         0   |   6.59012
           0         0         0         0  0.316077   0.92079  0.711527  0.721991   0.97451         0         0         0         0   |   3.42182
           0         0         0         0         0  0.472145  0.644017   9.40745  0.942497  0.391831         0         0         0   |   17.5052
           0         0         0         0         0         0  0.208711  0.283423   5.28292  0.593784 0.0808235         0         0   |   12.4837
           0         0         0         0         0         0         0  0.368239  0.065711   9.74149  0.772144  0.136276         0   |   12.9034
           0         0         0         0         0         0         0         0  0.287533  0.752401   4.842880.00250201  0.144639   |   2.0098
           0         0         0         0         0         0         0         0         0  0.822384  0.856314   8.47696  0.481803   |   3.6938
           0         0         0         0         0         0         0         0         0         0  0.159638  0.912712  0.399987   |   11.2776

Será armazenado da seguinte forma na SisDiag

           0         0   6.31933   0.12129   0.40335   |   10.1272
           0  0.822375  0.149912  0.403666 0.0934103   |   1.62489
    0.665764  0.484595   7.70683  0.363702  0.389191   |   6.09148
    0.240368  0.919199   2.42188   0.32831  0.552836   |   3.91664
    0.213782  0.988277   4.10009  0.530454  0.445994   |   17.1278
    0.792734 0.0574868    5.9119  0.904824  0.786781   |   6.59012
    0.316077   0.92079  0.711527  0.721991   0.97451   |   3.42182
    0.472145  0.644017   9.40745  0.942497  0.391831   |   17.5052
    0.208711  0.283423   5.28292  0.593784 0.0808235   |   12.4837
    0.368239  0.065711   9.74149  0.772144  0.136276   |   12.9034
    0.287533  0.752401   4.842880.00250201  0.144639   |   2.0098
    0.822384  0.856314   8.47696  0.481803         0   |   3.6938
    0.159638  0.912712  0.399987         0         0   |   11.2776


Porém ainda não é assim que usamos o sistema no método. Para o método ser viável, a matriz de coeficientes A deve ter a forma de uma matriz simétrica, por isso, fazemos a operação A^T * Ax = A^T * b .
Isso é feito usando a função void simetrizarSL(SisDiag_t *sl, SisDiag_t *slSimetrico).
Como teremos uma matriz simétrica, metade das diagonais (ou colunas na nossa representação) não precisa ser armazenadas na matriz, pois é repetido do outro lado.

Completando o exemplo dado anteriormente, a o sistema  A^t * A = A^t * b  é 

     41.0535   1.21238    8.0118  0.318958   0.25911         0         0         0         0         0         0         0         0   |   69.3888
     1.21238  0.329793   4.06507  0.772393  0.267515  0.132884         0         0         0         0         0         0         0   |   5.36525
      8.0118   4.06507   60.6115   5.27815   4.17774  0.621568 0.0953455         0         0         0         0         0         0   |   58.9485
    0.318958  0.772393   5.27815   7.61161   5.03427    6.5497   1.15805  0.623709         0         0         0         0         0   |   34.0042
     0.25911  0.267515   4.17774   5.03427   17.1732   2.98731   2.10553  0.273435  0.308021         0         0         0         0   |   75.3428
           0  0.132884  0.621568    6.5497   2.98731   36.6083   6.54504   9.75785   1.34231  0.185001         0         0         0   |   61.6267
           0         0 0.0953455   1.15805   2.10553   6.54504   1.98221   7.34333   2.40298  0.376275 0.0168688         0         0   |   29.9157
           0         0         0  0.623709  0.273435   9.75785   7.34333   89.8563   11.0916   7.44162  0.307241  0.050182         0   |   180.625
           0         0         0         0  0.308021   1.34231   2.40298   11.0916   29.8342   4.36268   1.870210.00967423 0.0415886   |   87.2094
           0         0         0         0         0  0.185001  0.376275   7.44162   4.36268   96.6452   11.9178   8.30073  0.505054   |   144.52
           0         0         0         0         0         0 0.0168688  0.307241   1.87021   11.9178    24.815   7.52198    1.1769   |   25.6688
           0         0         0         0         0         0         0  0.0501820.00967423   8.30073   7.52198   72.7105   4.44966   |   43.3688
           0         0         0         0         0         0         0         0 0.0415886  0.505054    1.1769   4.44966  0.413044   |   6.58126


Mas no programa só será armazenado

      41.0535   1.21238    8.0118  0.318958   0.25911   |   69.3888
     0.329793   4.06507  0.772393  0.267515  0.132884   |   5.36525
      60.6115   5.27815   4.17774  0.621568 0.0953455   |   58.9485
      7.61161   5.03427    6.5497   1.15805  0.623709   |   34.0042
      17.1732   2.98731   2.10553  0.273435  0.308021   |   75.3428
      36.6083   6.54504   9.75785   1.34231  0.185001   |   61.6267
      1.98221   7.34333   2.40298  0.376275 0.0168688   |   29.9157
      89.8563   11.0916   7.44162  0.307241  0.050182   |   180.625
      29.8342   4.36268   1.870210.00967423 0.0415886   |   87.2094
      96.6452   11.9178   8.30073  0.505054         0   |   144.52
       24.815   7.52198    1.1769         0         0   |   25.6688
      72.7105   4.44966         0         0         0   |   43.3688
     0.413044         0         0         0         0   |   6.58126


For fim, o método é chamado a partir da função conjGradient.